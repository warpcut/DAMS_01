#N canvas 665 32 560 572 10;
#X obj 4 252 cnv 3 550 3 empty empty inlets 8 12 0 13 -228856 -1 0
;
#X obj 4 370 cnv 3 550 3 empty empty outlets 8 12 0 13 -228856 -1 0
;
#X obj 74 259 cnv 17 3 84 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 74 378 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 74 348 cnv 17 3 17 empty empty 1 5 9 0 16 -228856 -162280 0
;
#X obj 74 399 cnv 17 3 17 empty empty 1 5 9 0 16 -228856 -162280 0
;
#X obj 186 223 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 4 7 cnv 15 553 42 empty empty empty 20 12 0 14 -233017 -66577
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 554 42 1;
#X restore 4 6 graph;
#X obj 307 7 cnv 15 250 40 empty empty empty 12 13 0 18 -128992 -233080
0;
#X obj 186 199 cyclone/zl len;
#X text 115 272 anything;
#X floatatom 186 147 5 0 0 0 - - -, f 5;
#X text 87 286 mode <symbol>;
#X text 174 272 - one or more element messages to be processed;
#X text 115 347 anything;
#X text 115 398 anything;
#X text 115 377 anything;
#X text 87 329 zlmaxsize <f>;
#X obj 4 424 cnv 3 550 3 empty empty arguments 8 12 0 13 -228856 -1
0;
#X obj 4 535 cnv 15 552 21 empty empty empty 20 12 0 14 -233017 -33289
0;
#X text 166 448 -;
#X text 166 430 -;
#X text 108 430 1) float;
#X text 108 448 1) symbol;
#X obj 4 505 cnv 3 550 3 empty empty attributes 8 12 0 13 -228856 -1
0;
#N canvas 0 22 450 300 (subpatch) 0;
#X coords 0 1 100 -1 252 42 1;
#X restore 306 6 graph;
#X text 284 202 length mode (outputs the;
#X text 239 222 number of elements in a message);
#X msg 229 146 beep 1 2 3 4;
#X text 139 257 bang;
#X text 122 314 zlclear;
#X text 174 314 - clears and reinitializes the zl object;
#N canvas 626 68 628 511 examples 0;
#X obj 108 138 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X obj 195 260 nbx 4 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#N canvas 728 59 406 428 zl_ecils 0;
#X obj 22 8 comment 185 14 monaco ? 0 0 0 0 Mode: ecils;
#X obj 235 271 nbx 3 14 0 100 0 0 empty empty empty 0 -8 0 10 -228856
-1 -1 0 256;
#X text 275 269 split point;
#X text 32 373 See also 'slice' mode;
#X obj 68 258 bng 20 250 50 0 empty empty empty 17 7 0 10 -228856 -1
-1;
#X obj 112 332 print ecils_Left;
#X obj 235 333 print ecils_Right;
#X msg 122 262 a b c d e f g h;
#X msg 112 237 1 2 3 4 5 6 7;
#X msg 90 207 mode ecils 4;
#X text 21 35 'ecils' is 'slice' backwards \, so it slices a list in
reverse order. You can set the split point with an argument or with
a float input into the right inlet \, but also when you set the mode
with the mode message. The default point is '0' \, which means no slicing.
;
#X text 174 207 <= sets mode and split point;
#X obj 112 295 cyclone/zl ecils 3, f 21;
#X text 24 161 A bang performs the operation in the last received list.
;
#X text 22 111 If you slice at 'n' \, the left outlet spits the last
'n' elements and the right outlet sends the first sliced elements.
;
#X connect 1 0 12 1;
#X connect 4 0 12 0;
#X connect 7 0 12 0;
#X connect 8 0 12 0;
#X connect 9 0 12 0;
#X connect 12 0 5 0;
#X connect 12 1 6 0;
#X restore 477 85 pd zl_ecils;
#N canvas 634 51 409 470 zl_group 0;
#X obj 268 274 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 24 18 comment 185 14 monaco ? 0 0 0 0 Mode: group;
#X obj 109 332 bng 20 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 260 374 nbx 3 14 0 100 0 0 empty empty empty 0 -8 0 10 -228856
-1 -1 0 256;
#X text 300 372 group size;
#X obj 149 397 cyclone/zl group 10;
#X floatatom 184 351 5 0 0 0 - - -, f 5;
#X msg 159 302 a b c d e f;
#X msg 171 325 g h i j k;
#X text 45 333 remainder;
#X obj 268 301 cyclone/uzi 24;
#X text 23 228 The right outlet is inactive.;
#X obj 149 424 print zl_group;
#X msg 149 268 mode group 4;
#X text 27 267 set mode & argument;
#X text 21 130 The input can have one or more elements \, when the
grouped elements reach the group size \, the grouped list is sent out
the left outlet. The remaining items are stored for next group.;
#X text 22 191 A bang message causes it to spit (and clear from the
memory) the remaining stored elements (at the set group size).;
#X text 22 44 The group mode aggroups 'n' elements into a list \, where
'n' cannot be higher than the maximum zl size. You can set 'n' (the
group size) with an argument or with a float input into the right inlet
\, but also when you set the mode with the mode message. The default
group size is the maximum zl size (and the minimum group size is 1).
;
#X connect 0 0 10 0;
#X connect 2 0 5 0;
#X connect 3 0 5 1;
#X connect 5 0 12 0;
#X connect 6 0 5 0;
#X connect 7 0 5 0;
#X connect 8 0 5 0;
#X connect 10 2 5 0;
#X connect 13 0 5 0;
#X restore 477 107 pd zl_group;
#N canvas 296 143 463 451 zl_iter 0;
#X msg 171 278 1 2 3 4 5 6;
#X msg 153 250 mode iter 4;
#X obj 153 384 print iter;
#X obj 24 18 comment 185 14 monaco ? 0 0 0 0 Mode: iter;
#X text 23 49 The iter mode breaks an input list in to sucessive lists
of a given size. If an input list is smaller than the iter size \,
the lista is output anyway - if the last bit of the broken list is
of a size smaller than the iter size \, it is also output.;
#X obj 113 281 bng 18 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X floatatom 196 327 5 0 0 0 - - -, f 5;
#X obj 252 334 nbx 3 14 1 100 0 0 empty empty empty 0 -8 0 10 -228856
-1 -1 1 256;
#X text 292 332 iter size;
#X text 23 121 The iter size can be set with an argument or with a
float input into the right inlet \, but also when you set the mode
with the mode message. The minimum iter size is 1 and the default is
'0' \, which means nothing happens.;
#X text 24 202 The right outlet is inactive.;
#X msg 182 303 one two three four five six;
#X obj 153 359 cyclone/zl iter 1;
#X text 24 182 A bang performs the operation in the last received list.
;
#X connect 0 0 12 0;
#X connect 1 0 12 0;
#X connect 5 0 12 0;
#X connect 6 0 12 0;
#X connect 7 0 12 1;
#X connect 11 0 12 0;
#X connect 12 0 2 0;
#X restore 477 129 pd zl_iter;
#N canvas 507 97 417 368 zl_join 0;
#X msg 112 121 mode join;
#X msg 240 237 joined together;
#X obj 153 161 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X obj 153 191 t b b;
#X msg 153 239 these are;
#X obj 153 279 cyclone/zl join;
#X obj 25 17 comment 185 14 monaco ? 0 0 0 0 Mode: join;
#X text 178 120 sets mode;
#X obj 153 322 print zl_join;
#X text 179 160 <= join them;
#X obj 98 220 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X text 46 219 resends;
#X text 24 48 The join mode joins two lists sent to each inlet. A bang
resends the last output or outputs a new list if the right inlet received
something new. This mode has no arguments. The right outlet is inactive.
;
#X connect 0 0 5 0;
#X connect 1 0 5 1;
#X connect 2 0 3 0;
#X connect 3 0 4 0;
#X connect 3 1 1 0;
#X connect 4 0 5 0;
#X connect 5 0 8 0;
#X connect 10 0 5 0;
#X restore 477 151 pd zl_join;
#N canvas 484 100 405 384 zl_len 0;
#X msg 154 178 this produces 3;
#X msg 165 210 and this should be five;
#X obj 130 277 cyclone/zl len;
#X msg 130 147 list two elements;
#X obj 130 313 nbx 4 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 71 213 bng 18 250 50 0 empty empty empty 17 7 0 10 -228856 -1
-1;
#X obj 130 341 print zl_len;
#X obj 25 17 comment 185 14 monaco ? 0 0 0 0 Mode: len;
#X msg 105 118 mode len;
#X msg 175 243 1 2 3 4 5 6 7 8 9 10 11 12 13 14;
#X text 163 117 <= sets mode;
#X text 20 213 resends;
#X text 24 47 The len mode outputs how many elements a lista has. A
bang resends the last output. This mode has no arguments. The right
inlet/outlet are inactive.;
#X connect 0 0 2 0;
#X connect 1 0 2 0;
#X connect 2 0 4 0;
#X connect 3 0 2 0;
#X connect 4 0 6 0;
#X connect 5 0 2 0;
#X connect 8 0 2 0;
#X connect 9 0 2 0;
#X restore 477 173 pd zl_len;
#X obj 227 465 zl.group;
#X text 49 416 In Max \, zl is also a family objects \, in which a
mode can instantiated after a dot after 'zl'. But in Pd this is not
the case!;
#X text 45 337 Check details about each mode in the suboatches on the
right. Modes introduced in the Max5+ versions are not implemented yet
\,;
#X obj 108 169 cyclone/uzi 512;
#X text 30 34 You can set the size of the list with a first optional
float argument. If you don't \, then the first argument is a symbol
that specifies the mode type \, and the maximum size is the default:
256 elements.;
#X text 44 289 The mode argument is obrigatory \, there is no default
mode. If you don't set it as an argument you have to set via the mode
message.;
#X text 222 150 back to default;
#X msg 227 169 zlmaxsize 256;
#N canvas 484 120 789 398 zl_mth 0;
#X obj 75 235 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X obj 451 210 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X obj 25 8 comment 185 14 monaco ? 0 0 0 0 Mode: mth;
#X msg 117 227 1 2 3 4 5 6 7 8 9 10;
#X obj 210 261 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 72 326 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X text 25 148 A bang performs the operation in the last received list.
;
#X msg 504 190 1 2 3 4 5 6 7 8 9 10;
#X msg 595 219 4 bye;
#X obj 440 291 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X text 24 36 The mode mth outputs the 'mth' element of a message through
the left outlet. The right outlet outputs the remaining elements \,
but can alse replace the mth element by another.;
#X text 24 85 The mth element is set as the 1st argument. The 1st element
is 0 (the default). If you set the mth to a number greater than the
input list \, all the elements are sent to the right outlet.;
#X text 421 72 The element that replaces the mth element in the right
outlet is set as the 2nd argument. This is optional \, no second argument
(the default) does not replace the mth element by anything.;
#X obj 595 290 print replaced_mth;
#X obj 484 290 print mth;
#X text 638 219 mth / replacement;
#X text 250 260 mth;
#X obj 210 323 print not_the_mth;
#X obj 117 323 print mth;
#X obj 117 289 cyclone/zl mth 3;
#X msg 96 187 mode mth 8;
#X obj 484 254 cyclone/zl mth 2 hi;
#X msg 484 162 mode mth 3 hello;
#X connect 0 0 19 0;
#X connect 1 0 21 0;
#X connect 3 0 19 0;
#X connect 4 0 19 1;
#X connect 7 0 21 0;
#X connect 8 0 21 1;
#X connect 19 0 5 0;
#X connect 19 0 18 0;
#X connect 19 1 17 0;
#X connect 20 0 19 0;
#X connect 21 0 9 0;
#X connect 21 0 14 0;
#X connect 21 1 13 0;
#X connect 22 0 21 0;
#X restore 477 195 pd zl_mth;
#N canvas 369 80 812 412 zl_nth 0;
#X obj 127 343 print nth;
#X obj 504 280 print nth;
#X obj 85 255 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X obj 471 200 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X obj 25 8 comment 185 14 monaco ? 0 0 0 0 Mode: nth;
#X msg 127 247 1 2 3 4 5 6 7 8 9 10;
#X obj 220 281 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X text 260 280 nth;
#X text 24 108 The nth element is set as the 1st argument. The 1st
element is 1 \, if you set it as 0 (the default) or to a number greater
than the input list \, all the elements are sent to the right outlet.
;
#X obj 82 346 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 127 309 cyclone/zl nth 3;
#X text 25 171 A bang performs the operation in the last received list.
;
#X obj 220 343 print not_the_nth;
#X obj 615 280 print replaced_nth;
#X obj 504 244 cyclone/zl nth 2 hi;
#X msg 524 180 1 2 3 4 5 6 7 8 9 10;
#X text 421 72 The element that replaces the nth element in the right
outlet is set as the 2nd argument. This is optional \, no second argument
(the defaukt) does not replace the nth element by anything.;
#X msg 615 209 4 bye;
#X obj 460 281 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X text 654 209 nth / replacement;
#X msg 109 206 mode nth 8;
#X msg 504 152 mode nth 3 hello;
#X text 24 36 The mode nth is the same as mth but starts counting from
1;
#X text 24 56 Thus \, it outputs the nth element of a message through
the left outlet. The right outlet outputs the remaining elements \,
but can alse replace the nth element by another.;
#X connect 2 0 10 0;
#X connect 3 0 14 0;
#X connect 5 0 10 0;
#X connect 6 0 10 1;
#X connect 10 0 0 0;
#X connect 10 0 9 0;
#X connect 10 1 12 0;
#X connect 14 0 1 0;
#X connect 14 0 18 0;
#X connect 14 1 13 0;
#X connect 15 0 14 0;
#X connect 17 0 14 1;
#X connect 20 0 10 0;
#X connect 21 0 14 0;
#X restore 477 217 pd zl_nth;
#N canvas 293 128 430 326 zl_reg 0;
#X obj 69 280 print reg;
#X obj 111 216 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X msg 306 186 this is stored;
#X msg 91 187 this is stored and sent;
#X obj 69 245 cyclone/zl reg initially stored elements;
#X msg 69 155 1 2 3 4;
#X msg 287 155 5 6 7 8;
#X text 136 218 <= outputs stored list;
#X msg 38 124 mode reg one two;
#X text 145 123 <= sets mode and arguments;
#X text 30 44 The reg mode stores lists. The initially stored list
is set as an argument and changed in the right inlet. The left inlet
stores and outputs the list. A bang sends the last stored list. The
right outlet is inactive.;
#X obj 33 17 comment 185 14 monaco ? 0 0 0 0 Mode: reg;
#X connect 1 0 4 0;
#X connect 2 0 4 1;
#X connect 3 0 4 0;
#X connect 4 0 0 0;
#X connect 5 0 4 0;
#X connect 6 0 4 1;
#X connect 8 0 4 0;
#X restore 477 239 pd zl_reg;
#N canvas 488 105 422 304 zl_rev 0;
#X msg 137 130 way this something means this;
#X obj 117 192 cyclone/zl rev;
#X obj 26 7 comment 185 14 monaco ? 0 0 0 0 Mode: rev;
#X obj 81 135 bng 18 250 50 0 empty empty empty 17 7 0 10 -228856 -1
-1;
#X text 25 38 The rev mode reverses the elements of a list. A bang
resends the last output. This mode has no arguments. The right inlet/outlet
are inactive.;
#X msg 148 157 1 2 3 4 5 6 7 8 9 10;
#X obj 117 237 print zl_rev;
#X msg 117 95 mode rev;
#X connect 0 0 1 0;
#X connect 1 0 6 0;
#X connect 3 0 1 0;
#X connect 5 0 1 0;
#X connect 7 0 1 0;
#X restore 477 261 pd zl_rev;
#N canvas 436 78 428 467 zl_rot 0;
#X msg 135 290 sometimes my grammar is all messed up;
#X obj 115 378 cyclone/zl rot 3;
#X obj 208 353 nbx 3 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 0 256;
#X obj 31 15 comment 185 14 monaco ? 0 0 0 0 Mode: rot;
#X obj 76 333 bng 18 250 50 0 empty empty empty 17 7 0 10 -228856 -1
-1;
#X text 31 181 A bang performs the operation in the last received list.
;
#X text 31 201 The right outlet is inactive.;
#X obj 115 417 print zl_rot;
#X text 30 47 The mode rot does rotate a list. If the rotation point
is a positive number 'n' \, the list is shifted to the right by 'n'
positions \, and the last 'n' elements are placed at the list start.
If 'n' is negative \, the rotation happens at the other direction.
;
#X text 31 120 You can set the rotation point with an argument or with
a float input into the right inlet \, but also when you set the mode
with the mode message. The default point is '0' \, which means no rotation.
;
#X msg 159 320 1 2 3 4 5 6 7 8 9 10 11 12;
#X msg 115 249 mode rot -3;
#X connect 0 0 1 0;
#X connect 1 0 7 0;
#X connect 2 0 1 1;
#X connect 4 0 1 0;
#X connect 10 0 1 0;
#X connect 11 0 1 0;
#X restore 477 283 pd zl_rot;
#N canvas 203 172 403 371 zl_sect 0;
#X obj 45 230 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X obj 220 305 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X text 235 321 no common elements;
#X text 241 307 bang if there are;
#X obj 79 313 print zl_sect;
#X msg 82 230 1 2 3 4 5 6 7 8 9 10;
#X msg 220 223 1 5 10 15 20;
#X obj 79 279 cyclone/zl sect 1 10 100;
#X msg 240 249 0 100 1000;
#X obj 20 7 comment 185 14 monaco ? 0 0 0 0 Mode: sect;
#X msg 69 186 mode sect 3 6 9;
#X text 171 187 <= set mode and argument;
#X text 18 35 The mode sect outputs the elements of an input list that
are in common to another list (set as an argument or via the right
inlet). The default is an empty list.;
#X text 19 82 The right outlet outputs a bang if there are no matching
elements.;
#X text 19 117 A bang performs the operation in the last received list
into the left inlet.;
#X connect 0 0 7 0;
#X connect 5 0 7 0;
#X connect 6 0 7 1;
#X connect 7 0 4 0;
#X connect 7 1 1 0;
#X connect 8 0 7 1;
#X connect 10 0 7 0;
#X restore 477 306 pd zl_sect;
#N canvas 521 119 415 398 zl_slice 0;
#X obj 22 8 comment 185 14 monaco ? 0 0 0 0 Mode: slice;
#X obj 235 251 nbx 3 14 0 100 0 0 empty empty empty 0 -8 0 10 -228856
-1 -1 0 256;
#X text 275 249 split point;
#X obj 68 238 bng 20 250 50 0 empty empty empty 17 7 0 10 -228856 -1
-1;
#X msg 122 242 a b c d e f g h;
#X msg 112 217 1 2 3 4 5 6 7;
#X text 174 187 <= sets mode and split point;
#X text 24 141 A bang performs the operation in the last received list.
;
#X text 32 353 See also 'ecils' mode;
#X text 21 35 The slice mode slices a list. You can set the split point
with an argument or with a float input into the right inlet \, but
also when you set the mode with the mode message. The default point
is '0' \, which means no slicing.;
#X msg 90 187 mode slice 4;
#X obj 112 275 cyclone/zl slice 3, f 21;
#X obj 112 312 print slice_Left;
#X obj 235 313 print slice_Right;
#X text 22 101 If you slice at 'n' \, the left outlet spits the first
'n' elements and the right outlet sends the remaining elements.;
#X connect 1 0 11 1;
#X connect 3 0 11 0;
#X connect 4 0 11 0;
#X connect 5 0 11 0;
#X connect 10 0 11 0;
#X connect 11 0 12 0;
#X connect 11 1 13 0;
#X restore 477 328 pd zl_slice;
#N canvas 488 111 415 301 zl_sort 0;
#X obj 76 141 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X obj 106 174 cyclone/zl sort;
#X msg 106 93 beep 1 2.3 137 bap;
#X msg 193 121 0;
#X msg 203 151 -1;
#X obj 106 211 print sorted;
#X obj 193 211 print sort indexes;
#X obj 223 119 comment 263 11 helvetica ? 0 80 80 80 ascending sort
;
#X obj 231 158 comment 263 11 helvetica ? 0 80 80 80 descending sort
;
#X text 40 44 arrange a list in alphanumeric order;
#X obj 42 13 comment 185 14 monaco ? 0 0 0 0 Mode: sort;
#X connect 0 0 1 0;
#X connect 1 0 5 0;
#X connect 1 1 6 0;
#X connect 2 0 1 0;
#X connect 3 0 1 1;
#X connect 4 0 1 1;
#X restore 477 350 pd zl_sort;
#N canvas 479 117 430 322 zl_sub 0;
#X obj 106 119 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X msg 139 120 1 2 3 4 5 6 7 8 9 5 5 5;
#X obj 139 182 cyclone/zl sub;
#X msg 185 147 5;
#X msg 220 147 11;
#X msg 260 147 7 8 9;
#X obj 139 244 print offset;
#X obj 220 244 print found;
#X obj 32 23 comment 185 14 monaco ? 0 0 0 0 Mode: sub;
#X text 34 70 output position for each occurance of right list in left
;
#X connect 0 0 2 0;
#X connect 1 0 2 0;
#X connect 2 0 6 0;
#X connect 2 1 7 0;
#X connect 3 0 2 1;
#X connect 4 0 2 1;
#X connect 5 0 2 1;
#X restore 477 372 pd zl_sub;
#N canvas 475 126 439 357 zl_union 0;
#X obj 93 169 bng 18 250 50 0 empty empty empty 0 -6 0 8 -216373 -66577
-1;
#X obj 136 214 cyclone/zl union;
#X msg 136 172 2.3 7 6.5;
#X msg 229 172 6.5 4 2.3 2 2 8;
#X obj 32 23 comment 185 14 monaco ? 0 0 0 0 Mode: union;
#X text 33 58 union the stuff in two lists \, does not duplicate things
in list 2 that are in list 1;
#X text 35 99 The right outlet is inactive.;
#X obj 136 266 print zl_union;
#X connect 0 0 1 0;
#X connect 1 0 7 0;
#X connect 2 0 1 0;
#X connect 3 0 1 1;
#X restore 477 394 pd zl_union;
#X text 481 424 * missing;
#X text 539 198 *;
#X text 547 352 *;
#X text 541 374 *;
#X text 552 396 *;
#X text 30 96 The maximum size is also set via the 'zlmaxsize' attribute
or message (and it can be up to 32767).;
#X obj 195 201 cyclone/zl 512 group 512;
#X obj 195 232 cyclone/zl len @maxzlsize 512;
#X obj 30 11 cyclone/comment 185 14 monaco ? 0 0 0 0 Basic:;
#X obj 486 53 cyclone/comment 185 14 monaco ? 0 0 0 0 Modes:;
#X obj 48 391 cyclone/comment 185 14 monaco ? 0 0 0 0 Inconsistency
;
#X connect 0 0 10 0;
#X connect 10 2 31 0;
#X connect 14 0 31 0;
#X connect 14 0 32 0;
#X connect 31 0 32 0;
#X connect 32 0 1 0;
#X restore 477 225 pd examples;
#X text 174 379 - output according to the mode: see details in [pd
examples];
#X text 174 398 - output according to the mode: see details in [pd
examples];
#X text 174 257 - depends on the mode \, see [pd examples];
#X obj 153 145 bng 18 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X msg 241 173 zlclear;
#X text 293 172 <= reinitializes;
#X text 101 144 resends;
#X text 104 160 length;
#X text 174 347 - depends on the mode \, see [pd examples];
#N canvas 960 243 438 237 subsequent_arguments 0;
#X text 18 68 group;
#X text 24 83 iter;
#X text 30 98 mth;
#X text 30 128 reg;
#X text 24 159 sect;
#X text 18 174 slice;
#X text 24 189 sort;
#X text 30 143 rot;
#X text 18 54 ecils;
#X text 30 113 nth;
#X text 57 83 - float: max length of output list (default 0);
#X text 57 98 - float: the element position counting from 0 (default
0);
#X text 57 128 - anything: stored elements (default none);
#X text 30 203 sub;
#X text 57 203 - anything: elements to look for (default none);
#X text 57 68 - float: length of the grouped list (default is zlmaxsize)
;
#X text 57 113 - float: the element position counting from 1 (default
0);
#X text 57 143 - float: number to rotate to (default 0);
#X text 57 174 - float: position to slice the list (default 0);
#X text 57 54 - float: position to slice the list (default 0);
#X text 57 189 - float: 0 (ascending \, default) or -1 (descending)
;
#X text 57 159 - anything: to compare with left input (default none)
;
#X text 37 6 The modes join \, len \, rev & union don't have arguments.
The other modes can have subsequent arguments as below. See also [pd
examples] for more details on how they work.;
#X restore 356 479 pd subsequent_arguments;
#X text 174 329 - sets maximum list size (from 1 to 32767);
#X text 174 287 -;
#X text 186 286 sets mode (you can also set subsequent arguments) -
check [pd examples] for more info;
#X text 180 430 optional: maximum list size (1-32767 \, default 256)
;
#X text 72 88 [zl] processes messages with one or more elements ("list
messages' or "anything") according to a mode (set via argument/message).
;
#X text 122 512 @zlmaxsize <float> - max list size (1-32767 \, default
256), f 62;
#X text 180 448 mode (ecils \, group \, iter \, join \, len \, mth
\, nth \, reg \, rev \, rot \, sect \, slice \, sort \, sub or union).
Modes can have subsequent arguments \, check:;
#X obj 19 60 cyclone/comment 0 18 times ? 0 0 0 0 List processor;
#X obj 18 7 cyclone/comment 0 37 times ? 0 0 0 0 zl;
#X obj 324 31 cyclone/comment 0 13 courier ? 0 224 228 220 Objects
cloned from Max/MSP;
#X obj 365 7 cyclone/comment 0 24 courier ? 0 224 228 220 cyclone;
#X obj 446 88 cnv 15 100 60 empty empty empty 20 12 0 14 -261234 -66577
0;
#X text 453 102 [zl] is not ready yet, f 13;
#X connect 10 0 6 0;
#X connect 12 0 10 0;
#X connect 29 0 10 0;
#X connect 37 0 10 0;
#X connect 38 0 10 0;

#N canvas 427 49 558 609 10;
#X obj 2 210 cnv 3 550 3 empty empty inlets 8 12 0 13 -228856 -1 0
;
#X obj 2 488 cnv 3 550 3 empty empty outlets 8 12 0 13 -228856 -1 0
;
#X obj 2 537 cnv 3 550 3 empty empty arguments 8 12 0 13 -228856 -1
0;
#X obj 79 495 cnv 17 3 17 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X obj 321 181 bng 15 250 50 0 empty empty empty 0 -6 0 10 -228856
-1 -1;
#X obj 79 516 cnv 17 3 17 empty empty 1 5 9 0 16 -228856 -162280 0
;
#X obj 2 599 cnv 1 550 1 empty empty empty 0 0 0 4 -262144 -262144
0;
#X obj 2 569 cnv 15 552 21 empty empty empty 20 12 0 14 -233017 -33289
0;
#X obj 210 118 bng 22 250 50 0 empty bng_play empty 17 7 0 10 -216373
-66577 -1;
#X obj 254 182 midiout;
#X text 144 215 bang;
#X text 138 231 float;
#X obj 2 5 cnv 15 553 42 empty empty empty 20 12 0 14 -233017 -66577
0;
#N canvas 0 22 450 278 (subpatch) 0;
#X coords 0 1 100 -1 554 42 1 0 0;
#X restore 2 4 graph;
#X obj 305 5 cnv 15 250 40 empty empty empty 12 13 0 18 -128992 -233080
0;
#N canvas 382 141 749 319 (subpatch) 0;
#X coords 0 -1 1 1 252 42 2 100 100;
#X restore 304 4 pd;
#X text 182 120 Play;
#X obj 210 182 print;
#X obj 79 218 cnv 17 3 264 empty empty 0 5 9 0 16 -228856 -162280 0
;
#X text 191 518 sent at the end of a sequence (useful for looping)
;
#X text 136 246 append -;
#X text 191 246 records at the end of the stored sequence, f 59;
#X text 148 276 dump -;
#X text 94 261 delay <float> -;
#X text 99 303 hook <float> -;
#X text 191 261 onset time in ms of the first event, f 59;
#X text 191 276 opens a dialog box to select a saved sequence to be
opened in a new text window \, which can be edited and saved, f 59
;
#X text 140 496 float -;
#X text 146 517 bang -;
#X text 116 545 1) symbol -;
#X msg 246 122 stop;
#X text 178 231 - raw MIDI data stream to be recorded, f 61;
#X text 191 303 multiplies all the event times by the given number
(even when playing), f 59;
#X text 191 496 raw MIDI data stream from played sequence;
#X obj 210 153 cyclone/seq seq.mid;
#N canvas 447 157 809 468 basic 0;
#X obj 134 315 cyclone/midiparse;
#X obj 163 145 tgl 22 0 empty empty empty 17 7 0 10 -216373 -66577
-1 0 1;
#X msg 170 212 stop;
#X obj 134 216 bng 17 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X text 193 147 play/stop;
#X obj 134 287 cyclone/midiflush;
#X msg 244 245 bang;
#X text 278 240 flush hanging;
#X text 280 254 MIDI notes;
#X obj 489 292 cyclone/seq;
#X msg 506 230 record;
#X obj 489 193 midiin;
#X obj 633 170 notein;
#X obj 633 220 cyclone/midiformat;
#X obj 633 194 pack;
#X obj 633 300 cyclone/seq;
#X msg 516 261 play;
#X obj 163 177 select 1 0;
#X obj 68 150 loadbang;
#X msg 244 208 read;
#X text 250 188 open another;
#X text 280 209 file;
#X text 26 92 Use the 'read' message to open another file with the
dialog box and 'read seq.mid' to re open the example.;
#X msg 446 232 write;
#X text 416 73 Use 'write' to save to a MIDI file with the dialog mox
\, or use 'write <symbol>' to save to a specific file.;
#X text 415 17 You can directly record from raw MIDI data with [midiin].
Use the 'record' message to start recodring \, you don't need the stop
message to switch from recording and playing.;
#X text 417 112 You can record from specialized MIDI objects such as
[notein] using the [midiformat] object to convert the messages to raw
MIDI.;
#X msg 663 247 record;
#X msg 677 272 play;
#X text 24 17 Below \, we play and stop with a toggle \, at the end
of the file a bang out the 2nd outlet of [seq] makes it play again
in a loop. When you stop it with the toggle \, it also flushes possible
hanging MIDI notes (with [midiflush]). We use [midiparse] to send note
messages to our synth.;
#X obj 489 392 cyclone/midiparse;
#X obj 632 391 cyclone/midiformat;
#X obj 563 428 cyclone/midiflush;
#X obj 134 247 cyclone/seq;
#X text 243 364 synthesizer;
#N canvas 638 210 345 266 polysynth 0;
#X obj 65 20 inlet;
#N canvas 667 245 370 323 synth 0;
#X obj 234 124 / 127;
#X obj 219 204 *~;
#X obj 81 134 phasor~;
#X obj 81 102 mtof;
#X obj 81 31 inlet;
#X obj 219 273 outlet~;
#X obj 81 70 unpack float float;
#X obj 234 174 vline~;
#X msg 234 149 \$1 50;
#X obj 81 162 cyclone/triangle~ 0.9;
#X obj 219 236 /~ 3;
#X connect 0 0 8 0;
#X connect 1 0 10 0;
#X connect 2 0 9 0;
#X connect 3 0 2 0;
#X connect 4 0 6 0;
#X connect 6 0 3 0;
#X connect 6 1 0 0;
#X connect 7 0 1 1;
#X connect 8 0 7 0;
#X connect 9 0 1 0;
#X connect 10 0 5 0;
#X restore 41 151 pd synth;
#X obj 65 84 pack f f f;
#X obj 100 207 outlet~;
#N canvas 667 245 370 323 synth 0;
#X obj 234 124 / 127;
#X obj 219 204 *~;
#X obj 81 134 phasor~;
#X obj 81 102 mtof;
#X obj 81 31 inlet;
#X obj 219 273 outlet~;
#X obj 81 70 unpack float float;
#X obj 234 174 vline~;
#X msg 234 149 \$1 50;
#X obj 81 162 cyclone/triangle~ 0.9;
#X obj 219 236 /~ 3;
#X connect 0 0 8 0;
#X connect 1 0 10 0;
#X connect 2 0 9 0;
#X connect 3 0 2 0;
#X connect 4 0 6 0;
#X connect 6 0 3 0;
#X connect 6 1 0 0;
#X connect 7 0 1 1;
#X connect 8 0 7 0;
#X connect 9 0 1 0;
#X connect 10 0 5 0;
#X restore 100 151 pd synth;
#N canvas 667 245 370 323 synth 0;
#X obj 234 124 / 127;
#X obj 219 204 *~;
#X obj 81 134 phasor~;
#X obj 81 102 mtof;
#X obj 81 31 inlet;
#X obj 219 273 outlet~;
#X obj 81 70 unpack float float;
#X obj 234 174 vline~;
#X msg 234 149 \$1 50;
#X obj 81 162 cyclone/triangle~ 0.9;
#X obj 219 236 /~ 3;
#X connect 0 0 8 0;
#X connect 1 0 10 0;
#X connect 2 0 9 0;
#X connect 3 0 2 0;
#X connect 4 0 6 0;
#X connect 6 0 3 0;
#X connect 6 1 0 0;
#X connect 7 0 1 1;
#X connect 8 0 7 0;
#X connect 9 0 1 0;
#X connect 10 0 5 0;
#X restore 161 152 pd synth;
#X text 124 19 3-voice polyphonic synth;
#X obj 65 115 route 1 2 3, f 18;
#X obj 65 52 poly 3 1;
#X connect 0 0 8 0;
#X connect 1 0 3 0;
#X connect 2 0 7 0;
#X connect 4 0 3 0;
#X connect 5 0 3 0;
#X connect 7 0 1 0;
#X connect 7 1 4 0;
#X connect 7 2 5 0;
#X connect 8 0 2 0;
#X connect 8 1 2 1;
#X connect 8 2 2 2;
#X restore 134 348 pd polysynth;
#X text 215 348 <= 3 voice polyphonic;
#X msg 68 175 read seq.mid;
#X obj 114 385 ./out~;
#X text 425 341 Please check the help file of [midiparse] \, [midiformat]
and [midiflush] \, which are useful with [seq].;
#X connect 0 0 35 0;
#X connect 1 0 17 0;
#X connect 2 0 33 0;
#X connect 3 0 33 0;
#X connect 5 0 0 0;
#X connect 6 0 5 0;
#X connect 10 0 9 0;
#X connect 11 0 9 0;
#X connect 12 0 14 0;
#X connect 12 1 14 1;
#X connect 13 0 15 0;
#X connect 14 0 13 0;
#X connect 16 0 9 0;
#X connect 17 0 3 0;
#X connect 17 1 2 0;
#X connect 17 1 6 0;
#X connect 18 0 37 0;
#X connect 19 0 33 0;
#X connect 23 0 9 0;
#X connect 27 0 15 0;
#X connect 28 0 15 0;
#X connect 33 0 5 0;
#X connect 33 1 3 0;
#X connect 35 0 38 0;
#X connect 35 0 38 1;
#X connect 37 0 33 0;
#X restore 492 109 pd basic;
#N canvas 745 43 437 378 more 0;
#X obj 71 202 midirealtimein;
#X msg 71 264 start -1;
#X obj 135 332 print;
#X obj 135 300 cyclone/seq seq.mid;
#X msg 135 264 stop;
#X text 42 23 When [seq] is recording \, it stores integer floats to
be interpreted as raw MIDI (bytes of MIDI messages) - thus it usually
records data from [midiin] or [cyclone/midiformat] objects \, but you
can also generate your own MIDI messages in the patch and record it.
The [seq] object can also record system exclusive messages from the
[sysexin] object.;
#X obj 196 234 midiclkin;
#X msg 175 265 tick;
#X text 263 233 <= only clock messages;
#X obj 71 233 route 250 252 248;
#X text 165 200 <= all real time messages;
#X text 42 114 [seq] doesn't respond directly to MIDI real time messages
such as "248" (MIDI clock) \, "250" (start) \, "251" (continue) \,
and "252" (stop). For that \, you need to adapt and use the [midiclkin]
and [midirealtimein] objects like in the example below.;
#X connect 0 0 9 0;
#X connect 1 0 3 0;
#X connect 3 0 2 0;
#X connect 4 0 3 0;
#X connect 7 0 3 0;
#X connect 9 0 1 0;
#X connect 9 1 4 0;
#X connect 9 2 7 0;
#X restore 499 177 pd more;
#X text 104 153 argument opens =>;
#X text 105 168 MIDI files;
#X text 342 182 <= when finished;
#X text 140 330 print -;
#X text 191 330 prints the first 16 events of the sequence in the Pd
Window;
#X text 92 376 start <float> -;
#X text 92 345 read <symbol> -;
#X text 86 469 write <symbol> -;
#X text 134 361 record -;
#X text 146 404 stop -;
#X text 146 452 tick -;
#X text 191 361 starts recording raw MIDI received in the inlet, f
59;
#X text 191 452 external clock \, needed after 'start -1' message,
f 59;
#X text 191 469 saves to a MIDI file (no symbol opens a dialog box)
, f 59;
#X text 191 346 reads from a MIDI file (no symbol opens a dialog box)
, f 59;
#X text 178 215 - starts or restarts playing a sequence at normal speed
, f 61;
#X text 191 376 start/restart sequence at a given tempo (default '1024'
- normal tempo) \, 'start -1' expects tick messages, f 59;
#N canvas 301 159 839 524 advanced 0;
#X msg 507 371 start -1;
#X obj 146 374 cyclone/midiparse;
#X obj 195 421 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 157 296 bng 15 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 146 402 unpack;
#X floatatom 146 445 4 0 0 0 - - -, f 4;
#X floatatom 179 445 4 0 0 0 - - -, f 4;
#X msg 63 256 delay 500;
#N canvas 61 23 405 363 osc 0;
#X obj 186 136 / 127;
#X msg 186 169 \$1 50;
#X obj 141 148 mtof;
#X obj 153 46 inlet;
#X obj 153 82 unpack;
#X obj 165 230 *~;
#X obj 165 270 outlet~;
#X obj 141 171 osc~;
#X obj 186 193 vline~;
#X connect 0 0 1 0;
#X connect 1 0 8 0;
#X connect 2 0 7 0;
#X connect 3 0 4 0;
#X connect 4 0 2 0;
#X connect 4 1 0 0;
#X connect 5 0 6 0;
#X connect 7 0 5 0;
#X connect 8 0 5 1;
#X restore 82 404 pd osc;
#X obj 290 332 tgl 15 0 empty empty empty 17 7 0 10 -228856 -1 -1 1
1;
#X obj 257 356 spigot;
#X obj 290 307 loadbang;
#X msg 146 256 delay 0;
#X obj 195 398 sel 31;
#X text 210 445 <= note messages (pitch/velocity);
#X text 308 331 <= loop;
#X msg 223 256 start 512;
#X msg 306 256 start 2048;
#X text 68 101 0 144 60 127 \; 1000 144 60 0 \; 1500 192 31 \; 1500
144 72 127 \; 2500 144 72 0 \;, f 17;
#X obj 589 391 metro;
#X msg 589 415 tick;
#X obj 589 457 cyclone/seq seq.txt;
#X obj 589 368 tgl 15 0 empty empty empty 17 7 0 10 -228856 -1 -1 1
1;
#X obj 589 327 loadbang;
#X obj 589 487 s \$0-midi;
#X obj 59 330 r \$0-midi;
#X text 214 420 <= program change 31;
#X obj 146 332 cyclone/seq seq.txt;
#X obj 39 437 ./out~;
#X text 17 179 The above formatted data instructs to play the note
middle C (with a velocity of 127 on channel 1) for one second. Then
\, half a second later \, change to program number 31 and repeat the
note message one octave above. See this in action in the example below.
, f 67;
#X text 454 13 The 'delay' message adds a delay time in ms to wait
before sending the fisrt event. In the patch to the left \, let it
loop and check the difference.;
#X text 454 59 The 'start' message starts reading the loaded sequence
and also allows you to control the playback speed \, set by the float
after the 'start' message - the normal speed is set as 'start 1024'
\, so 'start 512' is half the tempo (reads two times slower) \, 'start
2048' is twice the tempo (two times faster) and so on. If you send
it just "start" \, it plays at the original speed (so it's the same
as the bang message or 'start 1024').;
#X text 456 169 Note that the 'start' message can only set the speed
once (at the start of the sequence) - because every time we send the
start message \, it starts playing from the start! Thus \, a bang or
a 'start' message can also be used to 'restart' the sequence.;
#X text 16 13 The seq object reads and writes single track (format
0) standard MIDI files. All tracks of a multi-track midi file are merged
into one. It can also read and write text files in which each line
consists of a start time in milliseconds (the time elapsed since the
beginning of the sequence) followed by the bytes of a MIDI message
and end with a semicolon. For example:, f 67;
#X obj 641 425 nbx 7 14 -1e+37 1e+37 0 0 empty empty empty 0 -8 0 10
-228856 -1 -1 20.8333 256;
#X obj 641 398 expr 60000 / ($f1 * 24);
#X text 456 240 When you send it "start -1" \, it expects 'tick' messages
as the clock \, so you can use it to vary the playback tempo or to
synchronize with another clock (such as incoming MIDI Clock messages).
24 clock ticks is a quarter note \, you can convert BPM to time per
clock tick;
#X text 469 370 play:;
#X text 716 418 tick time in ms, f 9;
#X msg 641 358 120;
#X obj 641 379 nbx 6 14 30 240 0 0 empty empty empty 0 -8 0 10 -228856
-1 -1 120 256;
#X text 709 378 BPM;
#X connect 0 0 21 0;
#X connect 1 0 4 0;
#X connect 1 0 8 0;
#X connect 1 3 13 0;
#X connect 3 0 27 0;
#X connect 4 0 5 0;
#X connect 4 1 6 0;
#X connect 7 0 27 0;
#X connect 8 0 28 0;
#X connect 8 0 28 1;
#X connect 9 0 10 1;
#X connect 10 0 3 0;
#X connect 11 0 9 0;
#X connect 12 0 27 0;
#X connect 13 0 2 0;
#X connect 16 0 27 0;
#X connect 17 0 27 0;
#X connect 19 0 20 0;
#X connect 20 0 21 0;
#X connect 21 0 24 0;
#X connect 22 0 19 0;
#X connect 23 0 22 0;
#X connect 23 0 39 0;
#X connect 25 0 1 0;
#X connect 27 0 1 0;
#X connect 27 1 10 0;
#X connect 34 0 19 1;
#X connect 35 0 34 0;
#X connect 39 0 40 0;
#X connect 40 0 35 0;
#X restore 474 131 pd advanced;
#X text 191 545 a MIDI file to be loaded;
#X obj 17 58 cyclone/comment 0 18 times ? 0 0 0 0 MIDI sequencer;
#X obj 16 5 cyclone/comment 0 37 times ? 0 0 0 0 seq;
#X obj 322 29 cyclone/comment 0 13 courier ? 0 224 228 220 Objects
cloned from Max/MSP;
#X obj 363 5 cyclone/comment 0 24 courier ? 0 224 228 220 cyclone;
#X text 66 87 [seq] plays/records raw MIDI streams and can save/read
MIDI sequence files.;
#N canvas 791 23 437 626 extra 0;
#X text 20 17 [cyclone/seq] has some extra features not present in
the original Max object.;
#X text 21 67 first of all \, it has a text editor \, so you can open
\, view and edit rthe sequence \, just click on the object!;
#X obj 175 121 cyclone/seq seq.mid;
#X text 30 167 pause and continue.;
#X text 31 201 Max's [seq] does not have pause and continue methods
\, which are different than stop / start. A stop message not only stops
\, but goes back to the beggining of the sequence \, and only accepts
a "start" message afterwards \, which then restarts the sequence.;
#X text 33 275 After a pause message \, in cyclone \, [seq] can accept
the continue message and keep playing from where it stopped!;
#X obj 179 458 cyclone/midiparse;
#X obj 179 349 bng 17 250 50 0 empty empty empty 17 7 0 10 -228856
-1 -1;
#X obj 179 430 cyclone/midiflush;
#X obj 179 390 cyclone/seq;
#N canvas 638 210 345 266 polysynth 0;
#X obj 65 20 inlet;
#N canvas 667 245 370 323 synth 0;
#X obj 234 124 / 127;
#X obj 219 204 *~;
#X obj 81 134 phasor~;
#X obj 81 102 mtof;
#X obj 81 31 inlet;
#X obj 219 273 outlet~;
#X obj 81 70 unpack float float;
#X obj 234 174 vline~;
#X msg 234 149 \$1 50;
#X obj 81 162 cyclone/triangle~ 0.9;
#X obj 219 236 /~ 3;
#X connect 0 0 8 0;
#X connect 1 0 10 0;
#X connect 2 0 9 0;
#X connect 3 0 2 0;
#X connect 4 0 6 0;
#X connect 6 0 3 0;
#X connect 6 1 0 0;
#X connect 7 0 1 1;
#X connect 8 0 7 0;
#X connect 9 0 1 0;
#X connect 10 0 5 0;
#X restore 41 151 pd synth;
#X obj 65 84 pack f f f;
#X obj 100 207 outlet~;
#N canvas 667 245 370 323 synth 0;
#X obj 234 124 / 127;
#X obj 219 204 *~;
#X obj 81 134 phasor~;
#X obj 81 102 mtof;
#X obj 81 31 inlet;
#X obj 219 273 outlet~;
#X obj 81 70 unpack float float;
#X obj 234 174 vline~;
#X msg 234 149 \$1 50;
#X obj 81 162 cyclone/triangle~ 0.9;
#X obj 219 236 /~ 3;
#X connect 0 0 8 0;
#X connect 1 0 10 0;
#X connect 2 0 9 0;
#X connect 3 0 2 0;
#X connect 4 0 6 0;
#X connect 6 0 3 0;
#X connect 6 1 0 0;
#X connect 7 0 1 1;
#X connect 8 0 7 0;
#X connect 9 0 1 0;
#X connect 10 0 5 0;
#X restore 100 151 pd synth;
#N canvas 667 245 370 323 synth 0;
#X obj 234 124 / 127;
#X obj 219 204 *~;
#X obj 81 134 phasor~;
#X obj 81 102 mtof;
#X obj 81 31 inlet;
#X obj 219 273 outlet~;
#X obj 81 70 unpack float float;
#X obj 234 174 vline~;
#X msg 234 149 \$1 50;
#X obj 81 162 cyclone/triangle~ 0.9;
#X obj 219 236 /~ 3;
#X connect 0 0 8 0;
#X connect 1 0 10 0;
#X connect 2 0 9 0;
#X connect 3 0 2 0;
#X connect 4 0 6 0;
#X connect 6 0 3 0;
#X connect 6 1 0 0;
#X connect 7 0 1 1;
#X connect 8 0 7 0;
#X connect 9 0 1 0;
#X connect 10 0 5 0;
#X restore 161 152 pd synth;
#X text 124 19 3-voice polyphonic synth;
#X obj 65 115 route 1 2 3, f 18;
#X obj 65 52 poly 3 1;
#X connect 0 0 8 0;
#X connect 1 0 3 0;
#X connect 2 0 7 0;
#X connect 4 0 3 0;
#X connect 5 0 3 0;
#X connect 7 0 1 0;
#X connect 7 1 4 0;
#X connect 7 2 5 0;
#X connect 8 0 2 0;
#X connect 8 1 2 1;
#X connect 8 2 2 2;
#X restore 179 491 pd polysynth;
#X obj 159 528 ./out~;
#X msg 138 349 stop;
#X msg 227 336 pause;
#X msg 243 359 continue;
#X obj 138 391 b;
#X connect 6 0 10 0;
#X connect 7 0 9 0;
#X connect 8 0 6 0;
#X connect 9 0 8 0;
#X connect 9 1 7 0;
#X connect 10 0 11 0;
#X connect 10 0 11 1;
#X connect 12 0 9 0;
#X connect 12 0 15 0;
#X connect 13 0 9 0;
#X connect 14 0 9 0;
#X connect 15 0 8 0;
#X restore 439 154 pd extra features;
#X text 140 420 pause -;
#X text 191 404 stops recording/playing and goes back to start, f
59;
#X text 191 420 pauses recording/playing;
#X text 122 436 continue -;
#X text 191 436 continues after a pause message was given;
#X obj 457 59 cnv 15 88 40 empty empty empty 20 12 0 14 -261234 -66577
0;
#X text 460 64 [seq] is not ready yet, f 13;
#X connect 8 0 34 0;
#X connect 30 0 34 0;
#X connect 34 0 9 0;
#X connect 34 0 17 0;
#X connect 34 1 4 0;
